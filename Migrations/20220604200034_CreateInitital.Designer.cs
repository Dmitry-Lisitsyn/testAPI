// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using testAPI.Data;

namespace testAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220604200034_CreateInitital")]
    partial class CreateInitital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("testAPI.Models.Buyer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Buyer");
                });

            modelBuilder.Entity("testAPI.Models.Product", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("Price")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("testAPI.Models.ProvidedProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SalePointId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalePointId");

                    b.ToTable("ProvidedProducts");
                });

            modelBuilder.Entity("testAPI.Models.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BuyerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SalesPointId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TotalAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SalesPointId");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("testAPI.Models.SaleData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductIdAmount")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ProductQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleData");
                });

            modelBuilder.Entity("testAPI.Models.SalesIds", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BuyerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SaleId");

                    b.ToTable("SalesIds");
                });

            modelBuilder.Entity("testAPI.Models.SalesPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SalesPoints");
                });

            modelBuilder.Entity("testAPI.Models.ProvidedProduct", b =>
                {
                    b.HasOne("testAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("testAPI.Models.SalesPoint", "SalePoint")
                        .WithMany("ProvidedProducts")
                        .HasForeignKey("SalePointId");

                    b.Navigation("Product");

                    b.Navigation("SalePoint");
                });

            modelBuilder.Entity("testAPI.Models.Sale", b =>
                {
                    b.HasOne("testAPI.Models.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("testAPI.Models.SalesPoint", "SalesPoint")
                        .WithMany("Sales")
                        .HasForeignKey("SalesPointId");

                    b.Navigation("Buyer");

                    b.Navigation("SalesPoint");
                });

            modelBuilder.Entity("testAPI.Models.SaleData", b =>
                {
                    b.HasOne("testAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("testAPI.Models.Sale", "Sale")
                        .WithMany("SalesData")
                        .HasForeignKey("SaleId");

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("testAPI.Models.SalesIds", b =>
                {
                    b.HasOne("testAPI.Models.Buyer", "Buyer")
                        .WithMany("SaleIds")
                        .HasForeignKey("BuyerId");

                    b.HasOne("testAPI.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId");

                    b.Navigation("Buyer");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("testAPI.Models.Buyer", b =>
                {
                    b.Navigation("SaleIds");
                });

            modelBuilder.Entity("testAPI.Models.Sale", b =>
                {
                    b.Navigation("SalesData");
                });

            modelBuilder.Entity("testAPI.Models.SalesPoint", b =>
                {
                    b.Navigation("ProvidedProducts");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
